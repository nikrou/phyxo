security:
  enable_authenticator_manager: true

  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    #in_memory: { memory: ~ }
    app_user_provider:
      id: App\Security\UserProvider

  role_hierarchy:
    ROLE_NORMAL: ROLE_USER
    ROLE_ADMIN: ROLE_NORMAL
    ROLE_WEBMASTER: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    install:
      pattern: ^/admin/install
      security: false
    main:
      switch_user: true
      lazy: true
      provider: app_user_provider
      # entry_point: App\Security\LoginFormAuthenticator

      custom_authenticator:
        - App\Security\LoginFormAuthenticator

      remember_me:
        secret: '%kernel.secret%'
        signature_properties: [password]
        name: '%remember_cookie%'
        lifetime: 2592000 # 30 days in seconds

      logout:
        path: logout

      # provider: chain_provider
      # activate different ways to authenticate
      # http_basic: true
      # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
      # form_login: true
      # https://symfony.com/doc/current/security/form_login_setup.html

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: [ROLE_ADMIN] }
    - { path: ^/(identification|register|password|password/.+)$, roles: PUBLIC_ACCESS }
    - { path: ^/profile$, roles: ROLE_NORMAL }
    - { path: ^/, roles: [PUBLIC_ACCESS] }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
